<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd 
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd 
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
	http://cxf.apache.org/jaxws 
    http://cxf.apache.org/schemas/jaxws.xsd">


	<context:property-placeholder
		location="classpath:conf/db.properties" />
	<context:component-scan base-package="com.test" />
	<context:annotation-config />
	<!-- 连接池 -->
	<bean name="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>

	<!-- 核心事务管理器 -->
	<bean name="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>


	<!-- 配置通知 -->
	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" isolation="REPEATABLE_READ"
				propagation="REQUIRED" read-only="false" />
			<tx:method name="persist*" isolation="REPEATABLE_READ"
				propagation="REQUIRED" read-only="false" />
			<tx:method name="update*" isolation="REPEATABLE_READ"
				propagation="REQUIRED" read-only="false" />
			<tx:method name="modify*" isolation="REPEATABLE_READ"
				propagation="REQUIRED" read-only="false" />
			<tx:method name="delete*" isolation="REPEATABLE_READ"
				propagation="REQUIRED" read-only="false" />
			<tx:method name="remove*" isolation="REPEATABLE_READ"
				propagation="REQUIRED" read-only="false" />
			<tx:method name="get*" isolation="REPEATABLE_READ"
				propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" isolation="REPEATABLE_READ"
				propagation="REQUIRED" read-only="true" />
			<tx:method name="*" isolation="REPEATABLE_READ"
				propagation="REQUIRED" read-only="false" />
		</tx:attributes>
	</tx:advice>
	<!-- 配置将通知织入目标对象 配置切点 配置切面 -->
	<aop:config>
		<aop:pointcut
			expression="execution(* service.*impl.*(..))" id="txPc" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPc" />
	</aop:config>

	<!-- 开启注解事务 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->

	<!-- Spring 与 hibernate整合 Spring负责创建与维护SessionFactory -->
	<bean name="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>

				<prop key="hibernateshow_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<!-- 引入orm元数据 导入元数据所在包路径 Spring会自动扫描路径下的配置 -->
		<!-- <property name="mappingDirectoryLocations" value="classpath:com/test/pojo"></property> -->
		<!-- 注入hibernate的映射文件 -->
		<property name="mappingLocations">
			<list>
				<value>classpath:com/test/pojo/*.xml</value>
			</list>
		</property>
	</bean>

	<!-- 注册安全管理器对象 -->
	<bean id="securityManager"
		class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm" />
		<!-- 注入缓存管理器 -->
		<property name="cacheManager" ref="cacheManager" />
	</bean>


	<!-- 配置shiro过滤器工厂对象 -->
	<bean id="shiroFilter"
		class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 注入安全管理对象 -->
		<property name="securityManager" ref="securityManager"></property>
		<!-- 注入相关页面访问URL -->
		<property name="loginUrl" value="/login.jsp"></property>
		<property name="successUrl" value="/index.jsp"></property>
		<property name="unauthorizedUrl" value="/unauthorized.jsp"></property>
		<!-- 注入URL的拦截规则 起到过滤器的作用 -->
		<property name="filterChainDefinitions">
			<value>
				/css/** = anon
				/js/** = anon
				/images/** = anon
				/validatecode.jsp* = anon
				/index.jsp = anon
				/demo_index.action = anon
				/demo_list.action = perms["list"]
				/* = authc				
			</value>
		</property>
	</bean>





	<!-- 开启shiro注解支持 -->
	<bean id="defaultAdvisorAutoProxyCreator"
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
		<!-- 必须使用cglib方式为Action对象创建代理对象 如果value设置为 false则会受用jdk代理 jdk代理针对接口 例如action中实现了，ModleDriven 
			设置为true则使用cglib方式 基于继承 -->
		<property name="proxyTargetClass" value="true"></property>
	</bean>
	<!-- 配置shiro框架提供的切面类，用于创建 代理对象 -->
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	</bean>

	<!-- 注册缓存管理器 -->
	<bean id="cacheManager"
		class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<!-- 注入ehcache的配置文件 -->
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>

	<bean id="ehCacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml" />
		<property name="shared" value="true"></property>
	</bean>



	<!-- 注册Realm -->
	<bean id="myRealm" class="com.test.shiro.realm.MyRealm"></bean>

	<!-- <aop:aspectj-autoproxy proxy-target-class="true" /> -->
	<aop:config proxy-target-class="true"/>
		<!-- <bean name="testDao" class="com.test.dao.impl.TestDao"></bean> <bean 
			name="testService" class="com.test.service.impl.TestService"> <property name="testDao" 
			ref="testDao"></property> </bean> -->
		<jaxws:client id="surveyServiceClient"
			serviceClass="com.test.cxf.service.ISurveyService"
			address="http://localhost:8080/cxf_test/SurveyWebService" />


</beans>